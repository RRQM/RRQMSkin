<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:charts="clr-namespace:RRQMSkin.Charts"
                    xmlns:controls="clr-namespace:RRQMSkin.Controls"
                    xmlns:primitives="clr-namespace:RRQMSkin.Primitives"
                    xmlns:windows="clr-namespace:RRQMSkin.Windows">

    <SolidColorBrush x:Key="TextBox.Static.Border" Color="#FFABAdB3" />
    <SolidColorBrush x:Key="TextBox.MouseOver.Border" Color="#FF7EB4EA" />
    <SolidColorBrush x:Key="TextBox.Focus.Border" Color="#FF569DE5" />

    <Style x:Key="noneButtom" TargetType="{x:Type Button}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Border Background="Transparent">
                        <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center" />
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="iconButtom" TargetType="{x:Type Button}">
        <Setter Property="FontFamily" Value="/RRQMSkin;component/Fonts/#iconfont" />
        <Setter Property="FontSize" Value="16" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Border Name="border" Height="25" Width="25" Margin="3,0" BorderThickness="1">
                        <TextBlock Text="{TemplateBinding Content}"
                                   HorizontalAlignment="Center" VerticalAlignment="Center"
                                   Foreground="{TemplateBinding Foreground}" />
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter TargetName="border" Property="BorderBrush" Value="#E9E3B1" />
                            <Setter TargetName="border" Property="Background" Value="#FFFCF4" />
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="false">
                            <Setter TargetName="border" Property="BorderBrush" Value="Transparent" />
                            <Setter TargetName="border" Property="Background" Value="Transparent" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="deleteButton" TargetType="Button">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate>
                    <Grid x:Name="border" Height="20" Width="20" HorizontalAlignment="Center" VerticalAlignment="Center">
                        <Ellipse Fill="Red">
                            <Ellipse.Effect>
                                <DropShadowEffect ShadowDepth="0" Color="Black" />
                            </Ellipse.Effect>
                        </Ellipse>
                        <Path HorizontalAlignment="Center" VerticalAlignment="Center" Data="M 0,0 L10,0" Stroke="White" StrokeThickness="2" />
                    </Grid>
                    <ControlTemplate.Triggers>
                        <EventTrigger RoutedEvent="MouseEnter">
                            <BeginStoryboard>
                                <Storyboard Storyboard.TargetName="border" Storyboard.TargetProperty="Width">
                                    <DoubleAnimation To="23" Duration="0:0:0.2" />
                                </Storyboard>
                            </BeginStoryboard>
                            <BeginStoryboard>
                                <Storyboard Storyboard.TargetName="border" Storyboard.TargetProperty="Height">
                                    <DoubleAnimation To="23" Duration="0:0:0.2" />
                                </Storyboard>
                            </BeginStoryboard>
                        </EventTrigger>
                        <EventTrigger RoutedEvent="MouseLeave">
                            <BeginStoryboard>
                                <Storyboard Storyboard.TargetName="border" Storyboard.TargetProperty="Width">
                                    <DoubleAnimation To="20" Duration="0:0:0.2" />
                                </Storyboard>
                            </BeginStoryboard>
                            <BeginStoryboard>
                                <Storyboard Storyboard.TargetName="border" Storyboard.TargetProperty="Height">
                                    <DoubleAnimation To="20" Duration="0:0:0.2" />
                                </Storyboard>
                            </BeginStoryboard>
                        </EventTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="addButton" TargetType="Button">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate>
                    <Grid>
                        <Ellipse x:Name="ellipse" Height="25" Width="25" Fill="#C2C3C9" Stroke="Beige"
                                 StrokeThickness="2" />
                        <TextBlock Text="✚" HorizontalAlignment="Center" VerticalAlignment="Center" Foreground="Black" Opacity="0.6" />
                        <!--<Path Data="M 0,0 L10,0" VerticalAlignment="Center" Stroke="Black" StrokeThickness="2"  HorizontalAlignment="Center" />
                                                    <Path Data="M 0,0 L0,10" VerticalAlignment="Center" Stroke="Black" StrokeThickness="2"   HorizontalAlignment="Center" />-->
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="ellipse" Property="Fill" Value="#BCE8FF" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="isExpandedButton" TargetType="{x:Type ToggleButton}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Border Height="20" Width="20"
                            Padding="{TemplateBinding Padding}">
                        <Grid SnapsToDevicePixels="False">
                            <Ellipse x:Name="circle" Height="20" Width="20" HorizontalAlignment="Center" VerticalAlignment="Center"
                                     Fill="AliceBlue" />
                            <Path x:Name="arrow" HorizontalAlignment="Center" VerticalAlignment="Center" Panel.ZIndex="1" Data="M 0,1 L 5,5 L 10,1"
                                  SnapsToDevicePixels="false" Stroke="Black" StrokeThickness="2" />
                            <ContentPresenter Margin="4,0,0,0" HorizontalAlignment="Stretch" VerticalAlignment="Center" RecognizesAccessKey="True"
                                              SnapsToDevicePixels="True" />
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked" Value="true">
                            <Setter TargetName="arrow" Property="Data" Value="M 0,6  L 5,0  L 10,6" />
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter TargetName="arrow" Property="Stroke" Value="red" />
                            <Setter TargetName="circle" Property="Fill" Value="green" />
                        </Trigger>
                        <Trigger Property="IsPressed" Value="true">
                            <Setter TargetName="arrow" Property="Stroke" Value="blue" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="deleteAttributeButton" TargetType="Button">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate>
                    <TextBlock x:Name="delete" Text="✖" HorizontalAlignment="Center" VerticalAlignment="Center" FontSize="10"
                               Foreground="Black" Opacity="0.3" />
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="delete" Property="FontSize" Value="13" />
                            <Setter TargetName="delete" Property="Opacity" Value="0.7" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type windows:RRQMEffectWindow}">
        <Setter Property="Foreground" Value="Black" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type windows:RRQMEffectWindow}">
                    <Grid Name="windowGrid">
                        <Border Name="mainBorder"
                                Background="{TemplateBinding Background}"
                                BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="{TemplateBinding BorderThickness}"
                                CornerRadius="{TemplateBinding CornerRadius}">
                            <Grid>
                                <Grid.RowDefinitions>
                                    <RowDefinition Height="30" />
                                    <RowDefinition />
                                </Grid.RowDefinitions>
                                <Grid Name="header" Grid.Row="0" Panel.ZIndex="1">
                                    <Grid.ColumnDefinitions>
                                        <ColumnDefinition />
                                        <ColumnDefinition Width="auto" />
                                    </Grid.ColumnDefinitions>
                                    <Grid Name="title" Background="Transparent">
                                        <Grid.ColumnDefinitions>
                                            <ColumnDefinition Width="30" />
                                            <ColumnDefinition />
                                        </Grid.ColumnDefinitions>
                                        <Image Name="ico" Height="20" Width="20" Margin="3,0" HorizontalAlignment="Center"
                                               VerticalAlignment="Center"
                                               Source="{TemplateBinding Icon}" />
                                        <ContentPresenter Content="{TemplateBinding TitleContent}"
                                                          Grid.Column="1" Margin="3,0,0,0" HorizontalAlignment="Stretch" VerticalAlignment="Center" />
                                    </Grid>
                                    <StackPanel Grid.Column="1" Orientation="Horizontal">
                                        <Button Name="minButton" Content="&#xe622;"
                                                Command="{Binding MinWindowCommand, RelativeSource={RelativeSource Mode=TemplatedParent}}"
                                                Style="{StaticResource iconButtom}" />
                                        <Button Name="maxOrNormalButton"
                                                Command="{Binding MaxOrNormalWindowCommand, RelativeSource={RelativeSource Mode=TemplatedParent}}"
                                                Style="{StaticResource iconButtom}" />
                                        <Button Name="closeButton" Content="&#xe62c;"
                                                Command="{Binding CloseWindowCommand, RelativeSource={RelativeSource Mode=TemplatedParent}}"
                                                Style="{StaticResource iconButtom}" />
                                    </StackPanel>
                                </Grid>
                                <AdornerDecorator x:Name="content" Grid.Row="1" Grid.RowSpan="2" HorizontalAlignment="Stretch" VerticalAlignment="Stretch">
                                    <ContentPresenter Content="{TemplateBinding Content}"
                                                      Margin="{TemplateBinding Padding}"
                                                      HorizontalAlignment="Stretch" VerticalAlignment="Stretch" />
                                </AdornerDecorator>

                            </Grid>
                        </Border>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="WindowStyle" Value="SingleBorderWindow">
                            <Setter TargetName="minButton" Property="Visibility" Value="Visible" />
                            <Setter TargetName="maxOrNormalButton" Property="Visibility" Value="Visible" />
                            <Setter TargetName="closeButton" Property="Visibility" Value="Visible" />
                        </Trigger>
                        <Trigger Property="WindowStyle" Value="ToolWindow">
                            <Setter TargetName="minButton" Property="Visibility" Value="Collapsed" />
                            <Setter TargetName="maxOrNormalButton" Property="Visibility" Value="Collapsed" />
                            <Setter TargetName="closeButton" Property="Visibility" Value="Visible" />
                            <Setter TargetName="ico" Property="Visibility" Value="Collapsed" />
                        </Trigger>
                        <Trigger Property="ContentFill" Value="true">
                            <Setter TargetName="content" Property="Grid.Row" Value="0" />
                        </Trigger>
                        <Trigger Property="ContentFill" Value="false">
                            <Setter TargetName="content" Property="Grid.Row" Value="1" />
                        </Trigger>
                        <Trigger Property="WindowState" Value="Normal">
                            <Setter TargetName="maxOrNormalButton" Property="Content" Value="&#xe60d;" />
                        </Trigger>
                        <Trigger Property="WindowState" Value="Maximized">
                            <Setter TargetName="maxOrNormalButton" Property="Content" Value="&#xe65b;" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type windows:RRQMWindow}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type windows:RRQMWindow}">
                    <Border Name="mainBorder"
                            Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}">
                        <Grid>
                            <Grid.RowDefinitions>
                                <RowDefinition Height="30" />
                                <RowDefinition />
                            </Grid.RowDefinitions>
                            <Grid Name="header" Grid.Row="0" Panel.ZIndex="1">
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition />
                                    <ColumnDefinition Width="auto" />
                                </Grid.ColumnDefinitions>
                                <Grid Name="title" Background="Transparent">
                                    <Grid.ColumnDefinitions>
                                        <ColumnDefinition Width="30" />
                                        <ColumnDefinition />
                                    </Grid.ColumnDefinitions>
                                    <Image Name="ico" Height="20" Width="20" Margin="3,0" HorizontalAlignment="Center"
                                           VerticalAlignment="Center"
                                           Source="{TemplateBinding Icon}" />
                                    <ContentPresenter Content="{TemplateBinding TitleContent}"
                                                      Grid.Column="1" Margin="3,0,0,0" HorizontalAlignment="Stretch" VerticalAlignment="Center" />
                                </Grid>
                                <StackPanel Grid.Column="1" Orientation="Horizontal">
                                    <Button Name="minButton" Content="&#xe622;"
                                            Command="{Binding MinWindowCommand, RelativeSource={RelativeSource Mode=TemplatedParent}}"
                                            Style="{StaticResource iconButtom}" />
                                    <Button Name="maxOrNormalButton"
                                            Command="{Binding MaxOrNormalWindowCommand, RelativeSource={RelativeSource Mode=TemplatedParent}}"
                                            Style="{StaticResource iconButtom}" />
                                    <Button Name="closeButton" Content="&#xe62c;"
                                            Command="{Binding CloseWindowCommand, RelativeSource={RelativeSource Mode=TemplatedParent}}"
                                            Style="{StaticResource iconButtom}" />
                                </StackPanel>
                            </Grid>
                            <AdornerDecorator x:Name="content" Grid.Row="1" Grid.RowSpan="2" HorizontalAlignment="Stretch" VerticalAlignment="Stretch">
                                <ContentPresenter Content="{TemplateBinding Content}" Margin="{TemplateBinding Padding}" />
                            </AdornerDecorator>

                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="WindowStyle" Value="SingleBorderWindow">
                            <Setter TargetName="minButton" Property="Visibility" Value="Visible" />
                            <Setter TargetName="maxOrNormalButton" Property="Visibility" Value="Visible" />
                            <Setter TargetName="closeButton" Property="Visibility" Value="Visible" />
                        </Trigger>
                        <Trigger Property="WindowStyle" Value="ToolWindow">
                            <Setter TargetName="minButton" Property="Visibility" Value="Collapsed" />
                            <Setter TargetName="maxOrNormalButton" Property="Visibility" Value="Collapsed" />
                            <Setter TargetName="closeButton" Property="Visibility" Value="Visible" />
                            <Setter TargetName="ico" Property="Visibility" Value="Collapsed" />
                        </Trigger>
                        <Trigger Property="ContentFill" Value="true">
                            <Setter TargetName="content" Property="Grid.Row" Value="0" />
                        </Trigger>
                        <Trigger Property="ContentFill" Value="false">
                            <Setter TargetName="content" Property="Grid.Row" Value="1" />
                        </Trigger>
                        <Trigger Property="WindowState" Value="Normal">
                            <Setter TargetName="maxOrNormalButton" Property="Content" Value="&#xe60d;" />
                        </Trigger>
                        <Trigger Property="WindowState" Value="Maximized">
                            <Setter TargetName="maxOrNormalButton" Property="Content" Value="&#xe65b;" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type charts:PieChart}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type charts:PieChart}">
                    <ItemsPresenter SnapsToDevicePixels="True" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="ItemsPanel">
            <Setter.Value>
                <ItemsPanelTemplate>
                    <Grid />
                </ItemsPanelTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type charts:PieChartItem}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type charts:PieChartItem}">
                    <Viewbox>
                        <Grid Height="300" Width="300">
                            <primitives:Sector x:Name="sector"
                                               Fill="{TemplateBinding Foreground}"
                                               MaxRadiusRatio="1" MinRadiusRatio="0" />
                            <primitives:DialText x:Name="dialText"
                                                 Text="{TemplateBinding Text}"
                                                 FontSize="{TemplateBinding FontSize}"
                                                 Foreground="Black" RadiusRatio="0.5" />
                        </Grid>
                    </Viewbox>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type controls:CorrugatedButton}">
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type controls:CorrugatedButton}">
                    <Border Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            CornerRadius="{TemplateBinding CornerRadius}">
                        <Grid Name="mainGrid">
                            <Canvas Panel.ZIndex="-1">
                                <Ellipse x:Name="CorrugatedEllipse" Height="1" Width="1"
                                         Fill="{TemplateBinding CorrugatedBrush}" />
                            </Canvas>
                            <ContentPresenter Content="{TemplateBinding Content}"
                                              HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                              VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
                        </Grid>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type controls:SpeedDial}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type controls:SpeedDial}">
                    <Viewbox>
                        <Grid Height="{TemplateBinding ActualHeight}" Width="{TemplateBinding ActualWidth}">
                            <Ellipse />
                            <primitives:Sector EndAngle="230" Fill="#00BE8B" MaxRadiusRatio="0.98" MinRadiusRatio="0.8" StartAngle="149" />
                            <primitives:Sector EndAngle="320" Fill="#14BEFF" MaxRadiusRatio="0.98" MinRadiusRatio="0.8" StartAngle="230" />
                            <primitives:Sector EndAngle="391" Fill="#FF2975" MaxRadiusRatio="0.98" MinRadiusRatio="0.8" StartAngle="320" />
                            <primitives:Sector EndAngle="{TemplateBinding PointerAngle}"
                                               Fill="Orange" MaxRadiusRatio="0.8" MinRadiusRatio="0.7" StartAngle="149" />

                            <primitives:Dial MaxRadiusRatio="0.95" MinRadiusRatio="0.7" StartAngle="150" Stroke="Black" StrokeThickness="3"
                                             TickAngle="30" TickCount="9" />
                            <primitives:Dial MaxRadiusRatio="0.95" MinRadiusRatio="0.8" StartAngle="165" Stroke="Black" StrokeThickness="2"
                                             TickAngle="30" TickCount="8" />
                            <primitives:Dial MaxRadiusRatio="0.95" MinRadiusRatio="0.8" StartAngle="157.5" Stroke="Black" StrokeThickness="1"
                                             TickAngle="15" TickCount="16" />
                            <primitives:DialText Text="0,20,40,60,80,100,120,140,160" FontSize="20" RadiusRatio="0.6" StartAngle="150" TickAngle="30" />

                            <primitives:DialText Text="10,30,50,70,90,110,130,150" FontSize="12" RadiusRatio="0.7" StartAngle="165" TickAngle="30" />

                            <primitives:Pointer x:Name="pointer" PointerWidth="160"
                                                RatioAngle="{TemplateBinding PointerAngle}"
                                                RatioCenter="0.2,0.5">
                                <primitives:Pointer.Fill>
                                    <LinearGradientBrush StartPoint="0.5,0" EndPoint="0.5,1">
                                        <GradientStop Offset="0" Color="#FF3C57F5" />
                                        <GradientStop Offset="1" Color="#FFF38F8A" />
                                    </LinearGradientBrush>
                                </primitives:Pointer.Fill>
                                <primitives:Pointer.Effect>
                                    <DropShadowEffect BlurRadius="10" ShadowDepth="0" Color="Blue" />
                                </primitives:Pointer.Effect>
                            </primitives:Pointer>
                            <Ellipse Height="10" Width="10" Fill="White" />
                            <Ellipse Height="8" Width="8" Stroke="DarkCyan" StrokeThickness="1" />
                        </Grid>
                    </Viewbox>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type controls:Clock}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type controls:Clock}">
                    <Viewbox>
                        <Grid Height="300" Width="300">
                            <primitives:Dial x:Name="hourDial" MaxRadiusRatio="1" MinRadiusRatio="0.9" Stroke="Black" StrokeThickness="6"
                                             TickCount="12" />
                            <primitives:Dial x:Name="minuteDial" MaxRadiusRatio="1" MinRadiusRatio="0.9" Stroke="Black" StrokeThickness="1"
                                             TickAngle="6" TickCount="60" />
                            <primitives:DialText x:Name="dialText" Text="3,4,5,6,7,8,9,10,11,12,1,2" FontSize="20" FontWeight="Bold" RadiusRatio="0.8"
                                                 StartAngle="0" TickAngle="30" />
                            <primitives:Pointer x:Name="minutePointer" Fill="Black" PointerHeight="5" PointerWidth="130" RatioAngle="190"
                                                RatioCenter="0,0.5" />
                            <primitives:Pointer x:Name="hourPointer" Fill="Black" PointerWidth="80" RatioAngle="130" RatioCenter="0,0.5" />
                            <primitives:Pointer x:Name="secondPointer" Fill="Red" PointerHeight="3" PointerWidth="160" RatioAngle="340"
                                                RatioCenter="0.2,0.5" />
                            <Ellipse Height="10" Width="10" Fill="White" />
                            <Ellipse Height="8" Width="8" Stroke="DarkCyan" StrokeThickness="1" />
                        </Grid>
                    </Viewbox>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type controls:RoundProgressBar}">
        <Setter Property="Background" Value="#CED0CF" />
        <Setter Property="Foreground">
            <Setter.Value>
                <LinearGradientBrush StartPoint="0.5,0" EndPoint="0.5,1">
                    <GradientStop Offset="0" Color="#FF2B65F0" />
                    <GradientStop Offset="1" Color="#FFFF3BA4" />
                </LinearGradientBrush>
            </Setter.Value>
        </Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type controls:RoundProgressBar}">
                    <Viewbox>
                        <Grid Height="100" Width="100">
                            <primitives:Sector EndAngle="360"
                                               Fill="{TemplateBinding Background}"
                                               MaxRadiusRatio="1" MinRadiusRatio="0.7" StartAngle="0" Stroke="Transparent" />
                            <primitives:Sector x:Name="sector"
                                               Fill="{TemplateBinding Foreground}"
                                               MaxRadiusRatio="1" MinRadiusRatio="0.7" RoundStyle="Both" StartAngle="0" Stroke="Transparent" />
                            <TextBlock Text="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=Value, StringFormat=0.00%}"
                                       HorizontalAlignment="Center" VerticalAlignment="Center"
                                       FontFamily="{TemplateBinding FontFamily}"
                                       FontSize="{TemplateBinding FontSize}"
                                       FontStyle="{TemplateBinding FontStyle}"
                                       FontWeight="{TemplateBinding FontWeight}" />
                        </Grid>
                    </Viewbox>

                    <ControlTemplate.Triggers>
                        <Trigger Property="Value" Value="0">
                            <Setter TargetName="sector" Property="Visibility" Value="Hidden" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type controls:Loading}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type controls:Loading}">
                    <Grid Background="{TemplateBinding Background}">
                        <primitives:Sector EndAngle="360" Fill="#E8E8E7" MaxRadiusRatio="1" MinRadiusRatio="0.8" StartAngle="0" />
                        <primitives:Sector x:Name="sector"
                                           EndAngle="{TemplateBinding EndAngle}"
                                           Fill="{TemplateBinding Foreground}"
                                           MaxRadiusRatio="1" MinRadiusRatio="0.8" RoundStyle="Both" StartAngle="0" />
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>


    <Style TargetType="{x:Type controls:InputBox}">
        <Setter Property="Background" Value="{DynamicResource {x:Static SystemColors.WindowBrushKey}}" />
        <Setter Property="BorderBrush" Value="{StaticResource TextBox.Static.Border}" />
        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="KeyboardNavigation.TabNavigation" Value="None" />
        <Setter Property="HorizontalContentAlignment" Value="Left" />
        <Setter Property="FocusVisualStyle" Value="{x:Null}" />
        <Setter Property="AllowDrop" Value="true" />
        <Setter Property="ScrollViewer.PanningMode" Value="VerticalFirst" />
        <Setter Property="Stylus.IsFlicksEnabled" Value="False" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type controls:InputBox}">
                    <Border x:Name="border"
                            Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            CornerRadius="{Binding CornerRadius, RelativeSource={RelativeSource Mode=TemplatedParent}}"
                            SnapsToDevicePixels="True">
                        <ScrollViewer x:Name="PART_ContentHost" Focusable="false" HorizontalScrollBarVisibility="Hidden" VerticalScrollBarVisibility="Hidden" />
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter TargetName="border" Property="Opacity" Value="0.56" />
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter TargetName="border" Property="BorderBrush" Value="{StaticResource TextBox.MouseOver.Border}" />
                        </Trigger>
                        <Trigger Property="IsKeyboardFocused" Value="true">
                            <Setter TargetName="border" Property="BorderBrush" Value="{StaticResource TextBox.Focus.Border}" />
                        </Trigger>
                        <Trigger Property="controls:InputBox.IsComplies" Value="false">
                            <Setter TargetName="border" Property="BorderBrush" Value="Red" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsInactiveSelectionHighlightEnabled" Value="true" />
                    <Condition Property="IsSelectionActive" Value="false" />
                </MultiTrigger.Conditions>
                <Setter Property="SelectionBrush" Value="{DynamicResource {x:Static SystemColors.InactiveSelectionHighlightBrushKey}}" />
            </MultiTrigger>
        </Style.Triggers>
    </Style>

    <Style TargetType="{x:Type controls:XmlTreeView}">
        <Setter Property="Background" Value="GreenYellow" />
        <Setter Property="Foreground" Value="Black" />
        <Setter Property="IsExpanded" Value="False" />
        <Setter Property="HorizontalContentAlignment" Value="{Binding HorizontalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}" />
        <Setter Property="VerticalContentAlignment" Value="{Binding VerticalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}" />
        <Setter Property="ItemsPanel">
            <Setter.Value>
                <ItemsPanelTemplate>
                    <VirtualizingStackPanel IsItemsHost="True" Orientation="Vertical" VirtualizingPanel.CacheLength="20,20" VirtualizingPanel.IsVirtualizing="True"
                                            VirtualizingPanel.ScrollUnit="Item" VirtualizingPanel.VirtualizationMode="Recycling" />
                </ItemsPanelTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type controls:XmlTreeView}">
                    <Grid>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="40" />
                            <RowDefinition />
                        </Grid.RowDefinitions>
                        <Border x:Name="Bd"
                                Padding="{TemplateBinding Padding}"
                                Background="{TemplateBinding Background}"
                                BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="{TemplateBinding BorderThickness}"
                                SnapsToDevicePixels="true">
                            <Grid>
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="50" />
                                    <ColumnDefinition Width="auto" />
                                    <ColumnDefinition />
                                    <ColumnDefinition Width="20" />
                                </Grid.ColumnDefinitions>
                                <Button x:Name="deleteButton"
                                        Command="{Binding RemoveNodeCommand, RelativeSource={RelativeSource Mode=TemplatedParent}}"
                                        IsEnabled="{TemplateBinding IsEditable}"
                                        Opacity="{Binding ElementName=addButton, Path=Opacity}"
                                        Style="{StaticResource deleteButton}" />
                                <ContentPresenter x:Name="PART_Header" Grid.Column="1" HorizontalAlignment="Stretch" VerticalAlignment="Center" ContentSource="Header"
                                                  SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                                <StackPanel Grid.Column="2" Orientation="Horizontal">
                                    <ItemsControl BorderThickness="0"
                                                  ItemTemplate="{StaticResource attributeList}"
                                                  ItemsSource="{TemplateBinding AttributeCollection}"
                                                  Style="{StaticResource attributeListBox}" />
                                    <Button x:Name="addButton" Height="25" Width="25" Margin="5,0"
                                            Command="{Binding AddCommand, RelativeSource={RelativeSource Mode=TemplatedParent}}"
                                            IsEnabled="{TemplateBinding IsEditable}"
                                            Opacity="0"
                                            Style="{StaticResource addButton}"
                                            Visibility="Visible" />
                                </StackPanel>
                                <ToggleButton x:Name="Expander" Grid.Column="3" HorizontalAlignment="Center" Panel.ZIndex="1" ClickMode="Press"
                                              IsChecked="{Binding IsExpanded, RelativeSource={RelativeSource TemplatedParent}}"
                                              Style="{StaticResource isExpandedButton}"
                                              Visibility="{TemplateBinding ExpanderVisibility}" />
                            </Grid>
                        </Border>
                        <ItemsPresenter x:Name="ItemsHost" Grid.Row="1" Margin="0" />
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsExpanded" Value="false">
                            <Setter TargetName="ItemsHost" Property="Visibility" Value="Collapsed" />
                        </Trigger>

                        <Trigger Property="IsSelected" Value="True">
                            <Setter TargetName="Bd" Property="BorderBrush" Value="Black" />
                            <Setter TargetName="Bd" Property="BorderThickness" Value="1" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type controls:XmlEditor}">
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="BorderBrush" Value="Transparent" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="Padding" Value="0" />
        <Setter Property="Foreground" Value="Black" />
        <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto" />
        <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto" />
        <Setter Property="ScrollViewer.PanningMode" Value="Both" />
        <Setter Property="Stylus.IsFlicksEnabled" Value="False" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="ItemsPanel">
            <Setter.Value>
                <ItemsPanelTemplate>
                    <VirtualizingStackPanel IsItemsHost="True" Orientation="Vertical" VirtualizingPanel.CacheLength="20,20" VirtualizingPanel.IsVirtualizing="True"
                                            VirtualizingPanel.ScrollUnit="Item" VirtualizingPanel.VirtualizationMode="Recycling" />
                </ItemsPanelTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type controls:XmlEditor}">
                    <Border x:Name="Bd"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            SnapsToDevicePixels="true">
                        <ScrollViewer x:Name="_tv_scrollviewer_"
                                      Padding="{TemplateBinding Padding}"
                                      CanContentScroll="True" Focusable="false"
                                      HorizontalScrollBarVisibility="{TemplateBinding ScrollViewer.HorizontalScrollBarVisibility}"
                                      SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                      VerticalScrollBarVisibility="{TemplateBinding ScrollViewer.VerticalScrollBarVisibility}">
                            <ItemsPresenter />
                        </ScrollViewer>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type controls:DoubleEditTextBlock}">
        <Setter Property="Focusable" Value="True" />
        <Setter Property="IsReadOnly" Value="True" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="BorderBrush" Value="Black" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TextBox}">
                    <Border x:Name="border"
                            Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            SnapsToDevicePixels="True">
                        <Decorator x:Name="PART_ContentHost" Focusable="false" />
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsReadOnly" Value="True">
                            <Setter Property="Cursor" Value="Arrow" />
                            <Setter Property="Focusable" Value="False" />
                        </Trigger>
                        <Trigger Property="IsReadOnly" Value="False">
                            <Setter Property="Cursor" Value="IBeam" />
                            <Setter Property="Focusable" Value="True" />
                            <Setter Property="BorderThickness" Value="1" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type controls:SearchBox}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type controls:SearchBox}">
                    <Border Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            CornerRadius="{TemplateBinding CornerRadius}">
                        <Grid>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition />
                                <ColumnDefinition Width="40" />
                            </Grid.ColumnDefinitions>
                            <controls:InputBox Text="{Binding Text, Mode=TwoWay, RelativeSource={RelativeSource Mode=TemplatedParent}}"
                                               Margin="20,0" VerticalAlignment="Center" Background="Transparent" BorderThickness="0"
                                               InputFilter="{TemplateBinding InputFilter}" />
                            <Button x:Name="commandButton" Width="25" Grid.Column="1" Margin="0,-3,0,0" HorizontalAlignment="Left"
                                    VerticalAlignment="Center"
                                    Style="{StaticResource noneButtom}">
                                <Viewbox>
                                    <Path Data="M864 800l-179.2-179.2c32-44.8 51.2-99.2 51.2-156.8C736 313.6 614.4 192 464 192S192 313.6 192 464 313.6 736 464                                            736c57.6 0 112-19.2 156.8-51.2L800 864c16 16 44.8 16 64 0l0 0C883.2 844.8 883.2 819.2 864 800zM464 672C348.8 672 256                                           579.2 256 464S348.8 256 464 256s208 92.8 208 208S579.2 672 464 672z" Fill="#C2C3C9" />
                                </Viewbox>
                            </Button>

                        </Grid>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <DataTemplate x:Key="attributeList">
        <Border Height="30" Margin="10,0" Background="#ADE62F" CornerRadius="5">
            <Grid Margin="5,0" VerticalAlignment="Center">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="auto" />
                    <ColumnDefinition Width="auto" />
                    <ColumnDefinition Width="auto" MinWidth="60" />
                    <ColumnDefinition Width="20" />
                </Grid.ColumnDefinitions>
                <TextBlock Text="{Binding Key}" VerticalAlignment="Center" />
                <TextBlock Text=":" Grid.Column="1" Margin="3,0" VerticalAlignment="Center" />
                <ComboBox Text="{Binding Value, UpdateSourceTrigger=LostFocus}"
                          Grid.Column="2" Background="Transparent" IsEditable="True"
                          IsEnabled="{Binding IsEditable}" />
                <Button x:Name="deleteAttributeButton" Height="20" Width="20" Grid.Column="3" HorizontalAlignment="Center"
                        VerticalAlignment="Center"
                        Command="{Binding RemoveCommand}"
                        IsEnabled="{Binding IsEditable}"
                        Style="{StaticResource deleteAttributeButton}"
                        Visibility="Hidden" />
            </Grid>
        </Border>
        <DataTemplate.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter TargetName="deleteAttributeButton" Property="Visibility" Value="Visible" />
            </Trigger>
        </DataTemplate.Triggers>
    </DataTemplate>

    <Style x:Key="attributeListBox" TargetType="{x:Type ItemsControl}">
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="BorderBrush" Value="Transparent" />
        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" />
        <Setter Property="Stylus.IsFlicksEnabled" Value="False" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="ItemsPanel">
            <Setter.Value>
                <ItemsPanelTemplate>
                    <VirtualizingStackPanel Orientation="Horizontal" />
                </ItemsPanelTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ItemsControl}">
                    <Border x:Name="Bd"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            SnapsToDevicePixels="true">
                        <ItemsPresenter SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="TB_AccountInputStyle" TargetType="{x:Type TextBox}">
        <Setter Property="HorizontalContentAlignment" Value="Left" />
        <Setter Property="FocusVisualStyle" Value="{x:Null}" />
        <Setter Property="AllowDrop" Value="true" />
        <Setter Property="ScrollViewer.PanningMode" Value="VerticalFirst" />
        <Setter Property="Stylus.IsFlicksEnabled" Value="False" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TextBox}">
                    <Grid>
                        <Grid.RowDefinitions>
                            <RowDefinition />
                            <RowDefinition Height="2" />
                        </Grid.RowDefinitions>
                        <Decorator x:Name="PART_ContentHost" Focusable="false" />
                        <ProgressBar x:Name="progressBar" Grid.Row="1" />
                    </Grid>
                    <ControlTemplate.Triggers>
                        <EventTrigger RoutedEvent="GotKeyboardFocus">
                            <EventTrigger.Actions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="progressBar" Storyboard.TargetProperty="Value" To="100" Duration="0:0:0.5" />
                                    </Storyboard>
                                </BeginStoryboard>
                            </EventTrigger.Actions>
                        </EventTrigger>
                        <EventTrigger RoutedEvent="LostKeyboardFocus">
                            <EventTrigger.Actions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="progressBar" Storyboard.TargetProperty="Value" To="0" Duration="0:0:0.5" />
                                    </Storyboard>
                                </BeginStoryboard>
                            </EventTrigger.Actions>
                        </EventTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsInactiveSelectionHighlightEnabled" Value="true" />
                    <Condition Property="IsSelectionActive" Value="false" />
                </MultiTrigger.Conditions>
                <Setter Property="SelectionBrush" Value="{DynamicResource {x:Static SystemColors.InactiveSelectionHighlightBrushKey}}" />
            </MultiTrigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="PasswordBoxStyle" TargetType="{x:Type PasswordBox}">
        <Setter Property="PasswordChar" Value="●" />
        <Setter Property="Background" Value="{DynamicResource {x:Static SystemColors.WindowBrushKey}}" />

        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="KeyboardNavigation.TabNavigation" Value="None" />
        <Setter Property="HorizontalContentAlignment" Value="Left" />
        <Setter Property="FocusVisualStyle" Value="{x:Null}" />
        <Setter Property="AllowDrop" Value="true" />
        <Setter Property="ScrollViewer.PanningMode" Value="VerticalFirst" />
        <Setter Property="Stylus.IsFlicksEnabled" Value="False" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type PasswordBox}">
                    <Grid>
                        <Grid.RowDefinitions>
                            <RowDefinition />
                            <RowDefinition Height="2" />
                        </Grid.RowDefinitions>
                        <Decorator x:Name="PART_ContentHost" Focusable="false" />
                        <ProgressBar x:Name="progressBar" Grid.Row="1" />
                    </Grid>
                    <ControlTemplate.Triggers>
                        <EventTrigger RoutedEvent="GotKeyboardFocus">
                            <EventTrigger.Actions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="progressBar" Storyboard.TargetProperty="Value" To="100" Duration="0:0:0.5" />
                                    </Storyboard>
                                </BeginStoryboard>
                            </EventTrigger.Actions>
                        </EventTrigger>
                        <EventTrigger RoutedEvent="LostKeyboardFocus">
                            <EventTrigger.Actions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="progressBar" Storyboard.TargetProperty="Value" To="0" Duration="0:0:0.5" />
                                    </Storyboard>
                                </BeginStoryboard>
                            </EventTrigger.Actions>
                        </EventTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsInactiveSelectionHighlightEnabled" Value="true" />
                    <Condition Property="IsSelectionActive" Value="false" />
                </MultiTrigger.Conditions>
                <Setter Property="SelectionBrush" Value="{DynamicResource {x:Static SystemColors.InactiveSelectionHighlightBrushKey}}" />
            </MultiTrigger>
        </Style.Triggers>
    </Style>


    <Style x:Key="TB_NormalStyle" TargetType="{x:Type TextBox}">
        <Setter Property="Background" Value="{DynamicResource {x:Static SystemColors.WindowBrushKey}}" />
        <Setter Property="BorderBrush" Value="{StaticResource TextBox.Static.Border}" />
        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" />
        <Setter Property="BorderThickness" Value="2" />
        <Setter Property="FontSize" Value="16" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="KeyboardNavigation.TabNavigation" Value="None" />
        <Setter Property="HorizontalContentAlignment" Value="Left" />
        <Setter Property="FocusVisualStyle" Value="{x:Null}" />
        <Setter Property="AllowDrop" Value="true" />
        <Setter Property="ScrollViewer.PanningMode" Value="VerticalFirst" />
        <Setter Property="Stylus.IsFlicksEnabled" Value="False" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TextBox}">
                    <Border x:Name="border"
                            Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            CornerRadius="3" SnapsToDevicePixels="True">
                        <ScrollViewer x:Name="PART_ContentHost" Focusable="false" HorizontalScrollBarVisibility="Hidden" VerticalScrollBarVisibility="Hidden" />
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter TargetName="border" Property="Opacity" Value="0.56" />
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter TargetName="border" Property="BorderBrush" Value="{StaticResource TextBox.MouseOver.Border}" />
                        </Trigger>
                        <Trigger Property="IsKeyboardFocused" Value="true">
                            <Setter TargetName="border" Property="BorderBrush" Value="{StaticResource TextBox.Focus.Border}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsInactiveSelectionHighlightEnabled" Value="true" />
                    <Condition Property="IsSelectionActive" Value="false" />
                </MultiTrigger.Conditions>
                <Setter Property="SelectionBrush" Value="{DynamicResource {x:Static SystemColors.InactiveSelectionHighlightBrushKey}}" />
            </MultiTrigger>
        </Style.Triggers>
    </Style>

    <Style TargetType="{x:Type primitives:ContentThumb}">
        <Setter Property="Background" Value="#A3C4E1" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type primitives:ContentThumb}">
                    <Border Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}">
                        <ContentPresenter Content="{TemplateBinding Content}"
                                          HorizontalAlignment="Center" VerticalAlignment="Center" />
                    </Border>

                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter Property="Background" Value="#8ABCE4" />
                        </Trigger>
                        <Trigger Property="IsDragging" Value="true">
                            <Setter Property="Background" Value="#ACCBE4" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type controls:ValidationSlider}">
        <Setter Property="Background" Value="AliceBlue" />
        <Setter Property="ShadeBackground" Value="#FF9A00" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type controls:ValidationSlider}">
                    <Border Background="{TemplateBinding ShadeBackground}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            SnapsToDevicePixels="True">
                        <Grid>
                            <Grid x:Name="shadeGrid" Background="{TemplateBinding Background}" />
                            <ContentPresenter Content="{TemplateBinding Content}"
                                              HorizontalAlignment="Center" VerticalAlignment="Center" />
                            <Track x:Name="PART_Track">
                                <Track.Effect>
                                    <DropShadowEffect ShadowDepth="0" />
                                </Track.Effect>
                                <Track.Thumb>
                                    <primitives:ContentThumb x:Name="Thumb"
                                                             Content="{TemplateBinding ThumbContent}"
                                                             Width="50"  VerticalAlignment="Stretch" Focusable="False" />
                                </Track.Thumb>
                            </Track>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="Verification" Value="True">
                            <Setter Property="Content" Value="验证通过" />
                            <Setter Property="ThumbContent" Value="☑" />
                        </Trigger>

                        <Trigger Property="Verification" Value="False">
                            <Setter Property="Content" Value="按住滑块滑动，拖到最右边" />
                            <Setter Property="ThumbContent" Value="&gt;&gt;" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>


</ResourceDictionary>
